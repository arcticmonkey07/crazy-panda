{"version":3,"sources":["Components/Countries/Countries.js","Components/Pagination/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Countries","countries","loading","useState","countriesSortData","setCountriesSortData","toggle","setToggle","value","setValue","useEffect","sortData","field","sortCountries","concat","sort","a","b","filtredCountries","filter","country","name","toLowerCase","includes","className","type","placeholder","onChange","e","target","scope","onClick","map","i","area","src","flag","alt","style","width","capital","population","numericCode","Pagination","countriesPerPage","totalCountries","paginate","currentPage","pageNumbers","Math","ceil","push","number","activeClass","App","setCountries","setLoading","setCurrentPage","axios","get","res","data","getCountries","lastCountryIndex","firstCountryIndex","currentCountry","slice","allPagesCount","length","pageNumber","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02308f9b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Countries.css';\r\n\r\nconst Countries = ({ countries, loading }) => {\r\n\r\n  const [countriesSortData, setCountriesSortData] = useState([]);\r\n  const [toggle, setToggle] = useState(false);\r\n  const [value, setValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    setCountriesSortData(countries);\r\n  }, [countries]);\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  const sortData = (field) => {\r\n    setToggle(!toggle);\r\n    if (toggle) {\r\n      const countriesCopy = countries.concat();\r\n      const sortCountries = countriesCopy.sort((a, b) => { return a[field] > b[field] ? 1 : -1; });\r\n      setCountriesSortData(sortCountries);\r\n    } else {\r\n      const countriesCopy = countries.concat();\r\n      const sortCountries = countriesCopy.sort((a, b) => { return a[field] < b[field] ? 1 : -1; });\r\n      setCountriesSortData(sortCountries);\r\n    }\r\n  };\r\n\r\n  const filtredCountries = countriesSortData.filter(country => {\r\n    return country.name.toLowerCase().includes(value.toLowerCase());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <div className=\"form-group mb-3\">\r\n          <label className=\"mb-1\">Search:</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Enter search...\"\r\n            onChange={(e) => { setValue(e.target.value); }}\r\n          />\r\n        </div>\r\n      </form>\r\n\r\n      <table className=\"table\">\r\n        <thead className=\"table-head\">\r\n          <tr>\r\n            <th className=\"table-head-item\" scope=\"col\" onClick={() => { sortData('area'); }}>Area</th>\r\n            <th className=\"table-head-item\" scope=\"col\">Flag</th>\r\n            <th className=\"table-head-item\" scope=\"col\" onClick={() => { sortData('name'); }}>Country</th>\r\n            <th className=\"table-head-item\" scope=\"col\" onClick={() => { sortData('capital'); }}>Capital</th>\r\n            <th className=\"table-head-item\" scope=\"col\" onClick={() => { sortData('population'); }}>Population</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            filtredCountries.map((country, i) => (\r\n              <tr key={country.numericCode}>\r\n                <th scope=\"row\">{country.area}</th>\r\n                <td><img className='ml-2' src={country.flag} alt=\"flag\" style={{ width: 25 }} /></td>\r\n                <td>{country.name}</td>\r\n                <td>{country.capital}</td>\r\n                <td>{country.population}</td>\r\n              </tr>\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from 'react';\r\nimport './Pagination.css';\r\n\r\nconst Pagination = ({ countriesPerPage, totalCountries, paginate, currentPage }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalCountries / countriesPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"pagination\">\r\n        {\r\n          pageNumbers.map(number => {\r\n            let activeClass = currentPage === number ? 'active' : '';\r\n\r\n            return (\r\n              <li className='page-item' key={number}>\r\n                <button className={`page-link ${activeClass}`} onClick={() => paginate(number)}>\r\n                  {number}\r\n                </button>\r\n              </li>\r\n            );\r\n          }\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Countries from './Components/Countries/Countries';\nimport Pagination from './Components/Pagination/Pagination';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [countriesPerPage] = useState(50);\n\n  useEffect(() => {\n    const getCountries = async () => {\n      setLoading(true);\n      const res = await axios.get('https://restcountries.eu/rest/v2/all');\n      setCountries(res.data);\n      setLoading(false);\n    };\n\n    getCountries();\n  }, []);\n\n  const lastCountryIndex = currentPage * countriesPerPage;\n  const firstCountryIndex = lastCountryIndex - countriesPerPage;\n  const currentCountry = countries.slice(firstCountryIndex, lastCountryIndex);\n  const allPagesCount = countries.length / countriesPerPage;\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const nextPage = () => {\n    return currentPage >= allPagesCount ? null : setCurrentPage(prev => prev + 1);\n  };\n  const prevPage = () => {\n    return currentPage <= 1 ? null : setCurrentPage(prev => prev - 1);\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary\">Countries</h1>\n      <Countries countries={currentCountry} loading={loading} />\n      <Pagination currentPage={currentPage} paginate={paginate} countriesPerPage={countriesPerPage} totalCountries={countries.length} />\n\n      <button className='btn btn-primary' onClick={prevPage}>Prev Page</button>\n      <button className='btn btn-primary ms-2' onClick={nextPage}>Next Page</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}